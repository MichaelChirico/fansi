% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sgr.R
\name{state_at_end}
\alias{state_at_end}
\alias{close_state}
\title{Utilities for Managing CSI and OSC State  In Strings}
\usage{
state_at_end(
  x,
  warn = getOption("fansi.warn"),
  term.cap = getOption("fansi.term.cap"),
  normalize = getOption("fansi.normalize", FALSE),
  carry = getOption("fansi.carry", FALSE)
)

close_state(
  x,
  warn = getOption("fansi.warn"),
  normalize = getOption("fansi.normalize", FALSE)
)
}
\arguments{
\item{x}{a character vector or object that can be coerced to such.}

\item{warn}{TRUE (default) or FALSE, whether to warn when potentially
problematic \emph{Control Sequences} are encountered.  These could cause the
assumptions \code{fansi} makes about how strings are rendered on your display
to be incorrect, for example by moving the cursor (see \code{\link[=fansi]{?fansi}}).
If the problematic sequence is a tab, you can use the \code{tabs.as.spaces}
parameter on functions that have it, or the \code{tabs_as_spaces} function, to
turn the tabs to spaces and resolve the warning that way.}

\item{term.cap}{character a vector of the capabilities of the terminal, can
be any combination of "bright" (SGR codes 90-97, 100-107), "256" (SGR codes
starting with "38;5" or "48;5"), and "truecolor" (SGR codes starting with
"38;2" or "48;2"). Changing this parameter changes how \code{fansi}
interprets escape sequences, so you should ensure that it matches your
terminal capabilities. See \code{\link{term_cap_test}} for details.}

\item{normalize}{TRUE or FALSE (default) whether SGR sequence should be
normalized out such that there is one distinct sequence for each SGR code.
normalized strings will occupy more space (e.g. "\033[31;42m" becomes
"\033[31m\033[42m"), but will work better with code that assumes each SGR
code will be in its own escape as \code{crayon} does.}

\item{carry}{TRUE, FALSE, or a scalar string, controls whether active SGR
present at the end of an input vector element is carried into the next
vector element.  If FALSE each vector element is interpreted as if there
were no active state when they begin.  If character, then the active
state at the end of the \code{carry} string is carried into the first element of
\code{x}.  See the "State Interactions" section of \code{\link[=fansi]{?fansi}} for
details.}
}
\value{
character vector same length as \code{x}.
}
\description{
\code{state_at_end} read input strings computing the accumulated SGR and
OSC-anchored URLs until the end of the string and outputs the active state at
the end of it.  \code{close_state} produces the sequence that closes active SGR
and OSC-anchored URLs at the end of the input string.  If \code{normalize = FALSE}
(default), it will close SGRs with the reset code "ESC[0m", so it is only
interesting for closing SGRs if \code{normalize = TRUE}.  Unlike \code{state_at_end}
and other functions \code{close_state} has no concept of \code{carry}: it will only
close state activate within an element that is still active at the end of
that element.
}
\examples{
x <- c("\033[44mhello", "\033[33mworld")
state_at_end(x)
state_at_end(x, carry=TRUE)
(close <- close_state(state_at_end(x, carry=TRUE), normalize=TRUE))
writeLines(paste0(x, close, " no style"))
}
\seealso{
\code{\link[=fansi]{?fansi}} for details on how \emph{Control Sequences} are
interpreted, particularly if you are getting unexpected results.
}
