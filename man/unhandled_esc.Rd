% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unhandled.R
\name{unhandled_esc}
\alias{unhandled_esc}
\title{Identify Unhandled Escape Sequences}
\usage{
unhandled_esc(x)
}
\arguments{
\item{x}{character vector}
}
\value{
data frame with as many rows as there are unhandled escape
sequences and columns containing useful information for debugging the
problem.  See details.
}
\description{
Will return position and types of unhandled sequences in a character vector.
Unhandled sequences may cause \code{fansi} to interpret strings in a way
different to your display.  See \link{fansi} for details.
}
\details{
This is a debugging function and as such is not optimized for speed.

The return value is a data frame with five columns:
\itemize{
\item index: integer the index in \code{x} with the unhandled sequence
\item start: integer the start position of the sequence (in characters)
\item stop: integer the start position of the sequence (in characters)
\item error: the reason why the sequence was not handled:
\itemize{
\item special: contains uncommon characters in ":<=>"
\item unknown: a substring with a value that does not correspond to a known
SGR code
\item non-SGR: a non-SGR CSI sequence
\item malformed: a malformed CSI sequence
\item non-CSI: a non-CSI escape sequence, i.e. one where the ESC is
followed by something other than "["
}
\item translated: whether the string was translated to UTF-8, might be helpful in
odd cases were character offsets change depending on encoding.  You should
only worry about this if you cannot tie out the \code{start}/\code{stop} values to
the escape sequence shown.
\item esc: character the unhandled escape sequence
}
}
\examples{
string <- c(
  "\\033[41mhello world\\033[m", "foo\\033[22>m", "\\033[999mbar",
  "baz \\033[31#3m", "a\\033[31k", "hello\\033m world"
)
unhandled_esc(string)
}
\seealso{
\link{fansi} for important details on how strings are interpreted,
particularly if you are getting unexpected results.
}
