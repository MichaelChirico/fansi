% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/strwrap.R
\name{strwrap_esc}
\alias{strwrap_esc}
\title{ANSI CSI Aware Versions of strwrap}
\usage{
strwrap_esc(x, width = 0.9 * getOption("width"), indent = 0, exdent = 0,
  prefix = "", simplify = TRUE, initial = prefix)
}
\arguments{
\item{x}{a character vector, or an object which can be converted to a
    character vector by \code{\link{as.character}}.}

\item{width}{a positive integer giving the target column for wrapping
    lines in the output.}

\item{indent}{a non-negative integer giving the indentation of the
    first line in a paragraph.}

\item{exdent}{a non-negative integer specifying the indentation of
    subsequent lines in paragraphs.}

\item{prefix}{a character string to be used as prefix for
    each line except the first, for which \code{initial} is used.}

\item{simplify}{a logical.  If \code{TRUE}, the result is a single
    character vector of line text; otherwise, it is a list of the same
    length as \code{x} the elements of which are character vectors of
    line text obtained from the corresponding element of \code{x}.
    (Hence, the result in the former case is obtained by unlisting that
    of the latter.)}

\item{initial}{a character string to be used as prefix for
    each line except the first, for which \code{initial} is used.}

\item{wrap.always}{TRUE or FALSE (default), whether to hard wrap at requested
width if no word breaks are detected within a line.}

\item{pad.end}{TRUE or FALSE (default), whether to fill lines with spaces up to
\code{width}.}

\item{strip.spaces}{TRUE (default) or FALSE, if TRUE, extraneous spaces
(leading, trailing, repeated - except that after sentence end up to two
spaces are kept) are removed.}

\item{tabs.as.spaces}{TRUE or FALSE (default) whether to convert tabs to
spaces}

\item{tab.stops}{integer(1:n) indicating position of tab stops to use when
converting tabs to spaces.  If there are more tabs in a line than defined
tab stops the last tab stop is re-used.  For the purposes of applying tab
stops, each input line is considered a line and the character count begins
from the beginning of the input line.  Thus, if an input line is wrapped
the tab stops will not reset at the wrap point.  Additionally,\code{indent},
\code{exdent}, \code{initial}, and \code{prefix} will be ignore when computing tab
positions.  If you wish to use non-default values for those parameters in
conjunction with \code{tabs.as.spaces=TRUE}, you are probably better off adding
those modifications manually to the string after wrapping it.}
}
\description{
Unlike \link[base:strwrap]{base::strwrap}, this function will re-encode any non-ASCII strings to
UTF8 if they are not encoded in UTF8.
}
\details{
\code{strwrap2_csi} provides additional features and also has different default
behavior to \code{strwrap}.

Special character stripping as controlled by \code{strip.spaces}, \code{strip.tabs},
and \code{strip.control} are done in a separate pass and as a result will cause
the wrapping to be slower due to the need to allocate memory and populate
the global string cache for the stripping pass in additional to the wrapping
pass.

Width computations are done internally by using \code{R_nchar} on non-ASCII bytes
and counting ASCII bytes in normal ranges as being 1 wide.  This is subject
to all the limitations of \code{R_nchar}, but additionally will provide the wrong
answer when \code{R_nchar} correctly computes the width of a non-standard
multi-character sequence if passed the whole sequence, but not if each
character is passed individually as done here.  This will typically manifest
with things like combining emoji, though as of this writing we have not found
any combining sequences that \code{R_nchar} computes correctly when provided in
full and incorrectly when provided character by character.
}
