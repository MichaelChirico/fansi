% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/strwrap.R
\name{strwrap_esc}
\alias{strwrap_esc}
\alias{strwrap2_esc}
\title{ANSI Escape Sequence Aware Versions of strwrap}
\usage{
strwrap_esc(x, width = 0.9 * getOption("width"), indent = 0, exdent = 0,
  prefix = "", simplify = TRUE, initial = prefix,
  warn = getOption("fansi.warn"), term.cap = getOption("fansi.term.cap"))

strwrap2_esc(x, width = 0.9 * getOption("width"), indent = 0, exdent = 0,
  prefix = "", simplify = TRUE, initial = prefix, wrap.always = FALSE,
  pad.end = "", strip.spaces = !tabs.as.spaces, tabs.as.spaces = FALSE,
  tab.stops = 8L, warn = getOption("fansi.warn"),
  term.cap = getOption("fansi.term.cap"))
}
\arguments{
\item{x}{a character vector, or an object which can be converted to a
    character vector by \code{\link{as.character}}.}

\item{width}{a positive integer giving the target column for wrapping
    lines in the output.}

\item{indent}{a non-negative integer giving the indentation of the
    first line in a paragraph.}

\item{exdent}{a non-negative integer specifying the indentation of
    subsequent lines in paragraphs.}

\item{prefix}{a character string to be used as prefix for
    each line except the first, for which \code{initial} is used.}

\item{simplify}{a logical.  If \code{TRUE}, the result is a single
    character vector of line text; otherwise, it is a list of the same
    length as \code{x} the elements of which are character vectors of
    line text obtained from the corresponding element of \code{x}.
    (Hence, the result in the former case is obtained by unlisting that
    of the latter.)}

\item{initial}{a character string to be used as prefix for
    each line except the first, for which \code{initial} is used.}

\item{warn}{TRUE (default) or FALSE, whether to warn whether potentially
problematic escape sequences are encountered.  These could cause the
assumptions \code{fansi} is makes about how strings are rendered on your display
to be incorrect, for example by moving the cursor (see \link{string-parsing}).}

\item{term.cap}{character a vector of the capabilities of the terminal, can
be any combination "bright" (SGR codes 90-97, 100-107), "256" (SGR codes
starting with "38;5" or "48;5"), and "truecolor" (SGR codes starting with
"38;2" or "48;2"). Defaults to \code{c("bright", "256")}.  Changing this
parameter changes how \code{fansi} interprets escape sequences, so you should
ensure that it matches your terminal capabilities.}

\item{wrap.always}{TRUE or FALSE (default), whether to hard wrap at requested
width if no word breaks are detected within a line.}

\item{pad.end}{character(1L), a single character to use as padding at the
end of each line until the line is \code{width} wide.  This must be a printable
ASCII character or an empty string (default).  If you set it to an empty
string the line remains unpadded.}

\item{strip.spaces}{TRUE (default) or FALSE, if TRUE, extraneous white spaces
(spaces, newlines, tabs) are removed in the same way as \link[base:strwrap]{base::strwrap}
does.}

\item{tabs.as.spaces}{FALSE (default) or TRUE, whether to convert tabs to
spaces.  This can only be set to TRUE if \code{strip.spaces} is FALSE.}

\item{tab.stops}{integer(1:n) indicating position of tab stops to use when
converting tabs to spaces.  If there are more tabs in a line than defined
tab stops the last tab stop is re-used.  For the purposes of applying tab
stops, each input line is considered a line and the character count begins
from the beginning of the input line.}
}
\description{
Wraps strings to a specified width accounting for zero display width ANSI
escape sequences and control characters.  \code{strwrap_esc} is intended to
emulate \code{strwrap} exactly except with respect to the escape sequences, while
\code{strwrap2_esc} adds features and changes the processing of whitespace.
}
\details{
\code{strwrap2_esc} can convert tabs to spaces, pad strings up to \code{width}, and
hard-break words if single words are wider than \code{width}.

Unlike \link[base:strwrap]{base::strwrap}, both these functions will re-encode any non-ASCII
strings to UTF8 if they are not encoded in UTF8.

When replacing tabs with spaces the tabs are computed relative to the
beginning of the input line, not the most recent wrap point.
Additionally,\code{indent}, \code{exdent}, \code{initial}, and \code{prefix} will be ignored when
computing tab positions.
}
\examples{
hello.1 <- "hello \\033[41mred\\033[49m world"
hello.2 <- "hello\\t\\033[41mred\\033[49m\\tworld"

strwrap_esc(hello.1, 12)
strwrap_esc(hello.2, 12)

## In default mode strwrap2_esc is the same as strwrap_esc
strwrap2_esc(hello.2, 12)

## But you can leave whitespace unchanged
strwrap2_esc(hello.2, 12, strip.spaces=FALSE)

## And convert tabs to spaces
strwrap2_esc(hello.2, 12, tabs.as.spaces=TRUE)

## If your display has 8 wide tab stops the following two
## outputs should look the same
writeLines(strwrap2_esc(hello.2, 80, tabs.as.spaces=TRUE))
writeLines(hello.2)

## tab stops are NOT auto-detected, but you may provide
## your own
strwrap2_esc(hello.2, 12, tabs.as.spaces=TRUE, tab.stops=c(6, 12))

## You can also force padding at the end to equal width
writeLines(strwrap2_esc("hello how are you today", 10, pad.end="."))

## And a more involved example where we read the
## NEWS file, color it line by line, wrap it to
## 25 width and display some of it in 3 columns
## (works best on displays that support ANSI CSI
## SGR sequences)

NEWS <- readLines(file.path(R.home('doc'), 'NEWS'))
bg <- ceiling((seq_along(NEWS)) \%\% 215 + 1) + 16
fg <- ifelse((((bg - 16) \%/\% 18) \%\% 2), 30, 37)
tpl <- "\\033[\%d;48;5;\%dm\%s\\033[49m"

nz <- nzchar(NEWS)
NEWS[nz] <- sprintf(tpl, fg[nz], bg[nz], NEWS[nz])
NEWS[!nz] <- '\\n\\n'
NEWS.C <- paste0(NEWS, collapse="")

W <- strwrap2_esc(NEWS.C, 25, pad.end=" ", wrap.always=TRUE)
writeLines(c("", paste(W[1:40], W[200:240], W[410:450]), ""))
}
\seealso{
\link{fansi} for important details on how strings are interpreted,
particularly if you are getting unexpected results.
}
