% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ansi.R
\name{string-parsing}
\alias{string-parsing}
\title{\code{fansi} String Parsing}
\description{
\code{fansi} String Parsing
}
\section{ANSI Escape Sequences}{


\code{fansi} parses and \strong{interprets} ANSI CSI SGR sequences.  ANSI CSI SGR
sequences start with 'ESC[' and end in 'm' and will affect the display of
text on screen, for example by changing its color.  \code{fansi} also parses
other valid ANSI escape sequences but only so that they are excluded from
string width calculations.

In most cases \code{fansi}'s parsing and interpretation should be transparent to
the user, but in some cases a mismatch between how \code{fansi} interprets escape
sequences and how the display interprets them may cause artifacts (e.g.
string wrapping at the wrong column).  The most likely source of mismatches
are obscure or invalid ANSI CSI SGR sequences, and ANSI/other escape
sequences that move the cursor or delete screen output.  Keep in mind that
these things will also affect normal R string manipulation functions.

Some SGR codes that may cause problems:
\itemize{
\item "[34]8;2;..." if your system does not support it as this can cause a
frame-shift due to subsequent parameters being interpreted on a stand alone
basis instead of the rgb color spec.
\item "26" is assumed to be a single number code, which could cause problems if
the correct interpretation changes the meaning of subsequent numbers as
"38" and "48" do.
\item "22" is interpreted as double underline, not bold-off
}

We chose to interpret ANSI CSI SGR sequences because this reduces how
much string transcription we need to do.  If we do not interpret the
sequences then we need to record all of them from the beginning of the
string and prepend all the accumulated tags up to beginning of a substring
to the substring.  In many case the bulk of those accumulated tags will be
irrelevant as their effects will have been superseded by subsequent tags.

\code{fansi} assumes that ANSI CSI SGR sequences should be interpreted in
cumulative "Graphic Rendition Combination Mode".  This means new SGR
sequences add to rather than replace previous ones, although in some cases
the effect is the same as replacement (e.g. if you have a color active and
pick another one).

In theory it is possible to encode ANSI escape sequences with single byte
introducing character in the 0x40-0x5F range, but since this is rare and it
conflicts with UTF-8 encoding, we ignore it.

[' and end in 'm' and will affect the display of
text on screen, for example by changing its color.  \code{fansi} also parses
other valid ANSI escape sequences but only so that they are excluded from
string width calculations.

In most cases \code{fansi}'s parsing and interpretation should be transparent to
the user, but in some cases a mismatch between how \code{fansi} interprets escape
sequences and how the display interprets them may cause artifacts (e.g.
string wrapping at the wrong column).  The most likely source of mismatches
are obscure or invalid ANSI CSI SGR sequences, and ANSI/other escape
sequences that move the cursor or delete screen output.  Keep in mind that
these things will also affect normal R string manipulation functions.

Some SGR codes that may cause problems:
\itemize{
\item "[34]: R:'%20and%20end%20in%20'm'%20and%20will%20affect%20the%20display%20of%0Atext%20on%20screen,%20for%20example%20by%20changing%20its%20color.%20%20%60fansi%60%20also%20parses%0Aother%20valid%20ANSI%20escape%20sequences%20but%20only%20so%20that%20they%20are%20excluded%20from%0Astring%20width%20calculations.%0A%0AIn%20most%20cases%20%60fansi%60's%20parsing%20and%20interpretation%20should%20be%20transparent%20to%0Athe%20user,%20but%20in%20some%20cases%20a%20mismatch%20between%20how%20%60fansi%60%20interprets%20escape%0Asequences%20and%20how%20the%20display%20interprets%20them%20may%20cause%20artifacts%20(e.g.%0Astring%20wrapping%20at%20the%20wrong%20column).%20%20The%20most%20likely%20source%20of%20mismatches%0Aare%20obscure%20or%20invalid%20ANSI%20CSI%20SGR%20sequences,%20and%20ANSI/other%20escape%0Asequences%20that%20move%20the%20cursor%20or%20delete%20screen%20output.%20%20Keep%20in%20mind%20that%0Athese%20things%20will%20also%20affect%20normal%20R%20string%20manipulation%20functions.%0A%0ASome%20SGR%20codes%20that%20may%20cause%20problems:%0A%0A*%20%22[34
}
}

\section{Encodings / UTF-8}{


\code{fansi} will convert any non-ASCII strings to UTF-8.  These strings are
interpreted in a manner intended to be consistent with how R does things.
There are three ways things may not work out exactly as desired:
\enumerate{
\item \code{fansi} fails to treat a UTF-8 sequence the same way as R does
\item R incorrectly treats a UTF-8 sequences
\item Your display incorrectly treats a UTF-8 sequences
}

These issues are most likely to occur with invalid UTF-8 sequences, with
combining character sequences, and emoji.  For example, as of this writing R
(and my terminal) consider emojis to be one wide characters, when in reality
they are two wide.  Do not expect the \code{fansi} functions to work correctly
with strings containing emoji.

Internally, \code{fansi} computes the width of every UTF-8 character sequence
outside of the ASCII range using the native \code{R_nchar} function.  This will
cause such characters to be processed slower than ASCII characters.
Additionally, \code{fansi} character width computations can differ from R width
computations because \code{fansi} always computes width for each character, and it
is theoretically possible for \code{R_nchar} to return a width for a
character sequence that forms a single grapheme that is different than the
sum of the character widths.  In informal testing we have found this to be
rare because in the most common multi-character graphemes the combining
characters are computed as zero width.
}

\section{Roadmap}{


Ultimately we would like to adopt a proper UTF-8 library like
\href{https://github.com/patperry/r-utf8/}{r-utf8} or
\href{https://github.com/patperry/utf8lite}{utf8lite}, but that probably won't
happen for a while.
}

